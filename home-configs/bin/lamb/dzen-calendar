#!/usr/bin/python

import os
import sys
import json
import getopt
import psutil
import calendar
import subprocess
from datetime import date
from dateutil.relativedelta import *

def format_day(day):
    return str(day).rjust(2)

def format_current_month_day(day):
    template = '^fg({})^bg({}){{}}^fg()^bg()'.format(colours[0], colours[5]) if is_current_month and day is current.day else '{}'
    return template.format(format_day(day))

def format_row(row):
    return ' '.join([ format_current_month_day(x) for x in row if x != 0 ])

#  Get current day
today = date.today()

count = 0
screen = 0
replace = False
month = today.month
year = today.year

for proc in psutil.process_iter():
    if proc.name() != 'dzen2': continue
    if not '"calendar"' in proc.cmdline(): continue
    proc.kill()
    count += 1

optlist, _ = getopt.getopt(sys.argv[1:], 'm:y:s:r')

for o, a in optlist:
    if o == '-r':
        replace = True
    elif o == '-s':
        screen = a
    elif o == '-m':
        month = int(a)
    elif o == '-y':
        year = int(a)


if month > 12:
    month -= 12
    year += 1

if month < 1:
    month += 12
    year -= 1

current = today.replace(year=year, month=month)
is_current_month = current == today

if count > 0 and not replace: sys.exit()

#  Make sunday the first day of the week
calendar.setfirstweekday(calendar.SUNDAY)

#  Load colours
colours = []
with open(os.path.expanduser('~/.themes/color_other/colours.json')) as data:
    colours = json.load(data)

#  Global result variable
output = ''

#  Set header
head = '{:^16}'.format(current.strftime('%B %Y'))
back = '^ca(1, dzen-calendar -r -m {} -y {})<^ca() '.format(current.month -1, current.year)
forw = '^ca(1, dzen-calendar -r -m {} -y {})>^ca()'.format(current.month +1, current.year)
output += ''.join([ back, head, forw ]) + '\n'

next_month = current + relativedelta(months = 1)

#  Set weekdays row
output += 'Su Mo Tu We Th Fr Sa\n'

#  Add leading days
start = calendar.monthrange(current.year, current.month)[0]
if start < 6:
    previous_month = current - relativedelta(months = 1)
    days_in_previous_month = calendar.monthrange(previous_month.year, previous_month.month)[1]
    output += '^fg({})'.format(colours[8])
    output += ' '.join([ format_day(x) for x in range(days_in_previous_month - start, days_in_previous_month + 1) ])
    output += '^fg() '

#  Add main days
output += '\n'.join([ format_row(row) for row in calendar.monthcalendar(current.year, current.month)])

#  Add trailing days
num_trailing_days = 6 - calendar.monthrange(next_month.year, next_month.month)[0]
if num_trailing_days > 0:
    output += ' ^fg({})'.format(colours[8])
    output += ' '.join([ format_day(x + 1) for x in range(0, num_trailing_days) ])

output += '\n'

command = [
    'dzen2',
    '-title-name', '"calendar"',
    '-bg', colours[0],
    '-fg', colours[5],
    '-x', '-240',
    '-y', '45',
    '-h', '30',
    '-l', str(len(output.split('\n')) - 2),
    '-w', '240',
    '-fn', 'Source Code Pro',
    '-e', 'onstart=uncollapse;button3=exit',
    '-ta', 'c',
    '-sa', 'c',
    #  dzen is zero-indexed for some reason
    '-xs', str(int(screen) + 1),
    '-p'
]

p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

p.stdin.write(str.encode(output))

