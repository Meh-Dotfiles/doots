#!/bin/bash
#========================< Projekt ScriBt >============================#
#=========< Copyright 2016-2017, Arvindraj Thangaraj - "a7r3" >========#
#===============< ROM Information Database aka RIDb >==================#
# ShellCheck notes:                                                    #
# ROM.rc is a companion script for ROM.sh which can be associated with #
# a database. It runs in the same shell in which ROM.sh runs           #
# Most of the variables are set in ROM.sh, so the following warning    #
# codes are ignored                                                    #
# SC2034, SC2153, SC2154                                               #
#======================================================================#

function rom_names()
{
    case "$1" in
        1)
            ROM_NAME=( AICP );
            MAN=( platform_manifest.git );
            ROMNIS="aicp";
            ;;
        2)
            ROM_NAME=( AOKP );
            MAN=( platform_manifest.git );
            ROMNIS="aokp";
            ;;
        3)
            ROM_NAME=( AOSIP );
            MAN=( platform_manifest.git );
            ROMNIS="aosip";
            ;;
        4)
            ROM_NAME=( AOSP-CAF );
            MAN=( platform_manifest.git );
            ROMNIS="aosp";
            ;;
        5)
            ROM_NAME=( AospExtended );
            MAN=( manifest.git );
            ROMNIS="aosp";
            ;;
        6)
            ROM_NAME=( AOSP-RRO );
            MAN=( manifest.git );
            ROMNIS="aosp";
            ;;
        7)
            ROM_NAME=( BlissRoms );
            MAN=( platform_manifest.git );
            ROMNIS="bliss";
            ;;
        8)
            ROM_NAME=( CandyKat CandyRoms );
            MAN=( candykat.git candy.git );
            ROMNIS="candy";
            ;;
        9)
            ROM_NAME=( CarbonROM CarbonDev );
            MAN=( android.git android.git );
            ROMNIS="carbon";
            ;;
        10)
            ROM_NAME=( crdroidandroid );
            MAN=( android.git );
            ROMNIS="crdroid";
            ;;
        11)
            ROM_NAME=( CyanideL );
            MAN=( cyanide_manifest.git );
            ROMNIS="cyanide";
            ;;
        12)
            ROM_NAME=( CyanogenMod );
            MAN=( android.git );
            ROMNIS="cm";
            ;;
        13|38)
            ROM_NAME=( DirtyUnicorns );
            MAN=( android_manifest.git );
            ROMNIS="du";
            CNS="y";
            ;;
        14)
            ROM_NAME=( Euphoria-OS );
            MAN=( android_manifest.git );
            ROMNIS="eos";
            ;;
        15)
            ROM_NAME=( F-AOSP );
            MAN=( manifest.git );
            ROMNIS="aosp";
            ;;
        16)
            ROM_NAME=( FlayrOS );
            MAN=( manifest.git );
            ROMNIS="full";
            ROMV="flayr";
            ;;
        17)
            ROM_NAME=( krexus-caf );
            MAN=( manifest.git );
            ROMNIS="krexus";
            ;;
        18)
            ROM_NAME=( LineageOS );
            MAN=( android.git );
            ROMNIS="lineage";
            ROMV="cm";
            ;;
        19|40)
            ROM_NAME=( nitrogen-project );
            MAN=( android_manifest.git );
            ROMNIS="nitrogen";
            CNS="y";
            ;;
        20)
            ROM_NAME=( Team-OctOS );
            MAN=( platform_manifest.git );
            ROMNIS="to";
            ;;
        21)
            ROM_NAME=( OmniROM );
            MAN=( manifest.git );
            ROMNIS="omni";
            ;;
        22)
            ROM_NAME=( TeamOrion );
            MAN=( platform_manifest.git );
            ROMNIS="orion";
            ;;
        23)
            ROM_NAME=( OwnROM );
            MAN=( manifest.git );
            ROMNIS="ownrom";
            ;;
        24)
            ROM_NAME=( PAC-ROM );
            MAN=( pac-rom.git );
            ROMNIS="pac";
            ;;
        25)
            ROM_NAME=( Parallax-OS );
            MAN=( manifest.git );
            ROMNIS="aosp";
            ;;
        26)
            ROM_NAME=( AOSPA );
            MAN=( manifest.git );
            ROMNIS="pa";
            ;;
        27)
            ROM_NAME=( ResurrectionRemix );
            MAN=( platform_manifest.git );
            ROMNIS="cm";
            ;;
        28)
            ROM_NAME=( SlimRoms );
            MAN=( platform_manifest.git );
            ROMNIS="slim";
            ;;
        29)
            ROM_NAME=( temasek );
            MAN=( android.git );
            ROMNIS="cm";
            ;;
        30)
            ROM_NAME=( Tesla-M TeslaRom-N );
            MAN=( manifest.git manifest.git );
            ROMNIS="tesla";
            ;;
        31)
            ROM_NAME=( TipsyOs );
            MAN=( platform_manifest.git );
            ROMNIS="tipsy";
            ;;
        32)
            ROM_NAME=( TV-LP51 ValidusOs-M GZR-ValidusOS );
            MAN=( android.git manifest.git manifest.git );
            ROMNIS="validus";
            ;;
        33)
            ROM_NAME=( VanirAOSP );
            MAN=( platform_manifest.git );
            ROMNIS="vanir";
            ;;
        34)
            ROM_NAME=( TeamHorizon );
            MAN=( platform_manifest.git );
            ROMNIS="xenonhd";
            ;;
        35)
            ROM_NAME=( XOSP-Project );
            MAN=( platform_manifest.git );
            ROMNIS="xosp";
            ;;
        36)
            ROM_NAME=( Zephyr-Os );
            MAN=( manifest.git );
            ROMNIS="aosp";
            ROMV="zos";
            ;;
        # Nexus Only ROMs
        37)
            ROM_NAME=( ezio84 );
            MAN=( abc-n_manifest.git );
            ROMNIS="pure";
            ;;
        # 38 - DU; See above
        39)
            ROM_NAME=( CopperheadOS );
            MAN=( platform_manifest );
            ROMNIS="aosp";
            ;;
        40)
            ROM_NAME=( krexus );
            MAN=( manifest.git );
            ROMNIS="krexus";
            ;;
        # 41 - Nitrogen-Project
        42)
            ROM_NAME=( PureNexusProject );
            MAN=( manifest.git );
            ROMNIS="pure";
            ;;
        *)
            [ -z "$automate" ] && SBRN="Invalid";
            ;;
    esac
    [ ! -z "$1" ] && ROM_FN="${ROMS[$1]}";
} # rom_names

function color_my_life()
{
    CLR_0=( BLK RED GRN ORG BLU PRP CYN LGR );
    CLR_1=( DGR LRD LGN YEL LBL PNK LCN WYT );
    for NO in 0 1; do
        CT=0; CLR="CLR_${NO}[*]";
        for COLOR in ${!CLR}; do
            read -r "CL_${COLOR}" <<< "\\033[${NO};3${CT}m";
            (( CT++ ));
        done
    done
    unset CT CLR COLOR CLR_0 CLR_1; # To be safe
    NONE="\033[0m";
} # color_my_life

function gimme_info()
{
    if [ -z "$automate" ]; then
        case "$1" in
            # Init
            "refer") echo -e "${INF} If you have any ROM's source completely synced, giving this source a reference source, will avoid redownloading common projects, thus saving a lot of time\n" ;;
            "cldp") echo -e "${INF} If unset, Syncs the Entire commit history of any repo which is better for future syncs \n Unless you know what you're doing,${NONE} ${CL_LRD}Answer n${NONE}\n" ;;
            # Sync
            "jobs") echo -e "${INF} Slow Speed? Recommended value - 1. Else your wish\n";;
            "fsync") echo -e "${INF} Overwrite Local Sources with Remote\n" ;;
            "ssync") echo -e "${INF} Checkout output will appear\n" ;;
            "syncrt") echo -e "${INF} If Enabled, syncs only the desired branch as specified in the manifest, instead of syncing all branches. Saves Space)\n" ;;
            "clnbun") echo -e "${INF} Works with AOSP repositories, Downloads a prepackaged bundle file instead of objects from the server (Less objects, better sync). Sync takes place faster coz Google!\n" ;;
            # Pre-Build
            "device-type") echo -e "${INF} For Phones : If you don't find common_full_phone / common_mini_phone then leave this field blank\nBuildSystem would consider the Device as a Phone.\n" ;;
            "bootres")
                echo -e "${INF} Among these Values - Select the one which is nearest or almost Equal to that of your Device";
                echo -e "${INF} Resolutions which are available for a ROM is shown by it's name. All Res are available for PAC-5.1";
                echo -e "${CL_PNK}240${NONE}x400";
                echo -e "${CL_PNK}320${NONE}x480 (AOKP)";
                echo -e "${CL_PNK}480${NONE}x800 and ${CL_PNK}480${NONE}x854 (AOKP & PA)";
                echo -e "${CL_PNK}540${NONE}x960 (AOKP)";
                echo -e "${CL_PNK}600${NONE}x1024";
                echo -e "${CL_PNK}720${NONE}x1280 (AOKP & PA)";
                echo -e "${CL_PNK}768${NONE}x1024 and ${CL_PNK}768${NONE}x1280 (AOKP)";
                echo -e "${CL_PNK}800${NONE}x1280 (AOKP)";
                echo -e "${CL_PNK}960${NONE}x540";
                echo -e "${CL_PNK}1080${NONE}x1920 (AOKP & PA)";
                echo -e "${CL_PNK}1200${NONE}x1920";
                echo -e "${CL_PNK}1280${NONE}x800";
                echo -e "${CL_PNK}1440${NONE}x2560 (PA)";
                echo -e "${CL_PNK}1536${NONE}x2048";
                echo -e "${CL_PNK}1600${NONE}x2560";
                echo -e "${CL_PNK}1920${NONE}x1200";
                echo -e "${CL_PNK}2560${NONE}x1600\n";
                ;;
            # Build
            "make")
                echo -e "${INF} make/mka is a GNU/Linux utility for building any GNU/Linux System. Android in this case";
                echo -e "${INF} ${CL_WYT}make${NONE} needs number of threads as an argument. If not Specified, it'd use max threads";
                echo -e "${INF} ${CL_WYT}mka${NONE} is a high-performance version of the make binary which ensures COMPLETE use of Available resources";
                ;;
            "outdir") echo -e "${INF} Keeping /out in another drive ensures faster builds. But it is ${CL_WYT}not a compulsion${NONE}\n" ;;
            "outcln") echo -e "${INF} 1 - Remove Staging Directories\n${INF} 2 - Full Clean\n${INF} Others - No cleaning\n" ;;
            "jack") echo -e "${INF} Jack is a Toolchain for building Android Apps and Frameworks with the Help of a Java VM, Introduced from Marshmallow\n" ;;
            "ninja") echo -e "${INF} Ninja is a Build-System, which is a new implementation on Building Android, Introduced from Nougat\n" ;;
        esac
    fi
} # gimme_info

function dist_db()
{
    # Allots Distro Release Year w.r.t Distro Name and Version
    # Based on Collective Information from the Internet
    case "$1" in
        neon|[Uu]buntu)
            case "$2" in
                12.04|12.10) DYR="D12" ;; # Distro(s) released in 2012
                13.04|13.10) DYR="D13" ;; # Distro(s) released in 2013
                14.04|14.10) DYR="D14" ;; # Distro(s) released in 2014
                15.04|15.10) DYR="D15" ;; # Distro(s) released in 2015
                16.04|16.10) DYR="D16" ;; # Distro(s) released in 2016
                17.04) DYR="D17" ;; # Distro(s) released in 2017
            esac
            ;;
        debian)
            case "$2" in
                8|8.1|8.2|8.3|8.4|8.5|8.6)
                    DYR="D15" ;;
            esac
            ;;
        elementary)
            case "$2" in
                0.2) DYR="D12" ;;
                0.3|0.3.1|0.3.2) DYR="D14" ;;
                0.4) DYR="D16" ;;
            esac
            ;;
        [Ll]inux[Mm]int)
            case "$2" in
                14) DYR="D12" ;;
                15|16) DYR="D13" ;;
                17|17.1|17.2|17.3) DYR="D14" ;;
                18|18.1) DYR="D16" ;;
            esac
            ;;
        "Zorin OS")
            case "$2" in
                6) DYR="D12" ;;
                7|8) DYR="D13" ;;
                9) DYR="D14" ;;
                10) DYR="D15" ;;
                11|12) DYR="D16" ;;
            esac
            ;;
    esac
} # dist_db
