#! /usr/bin/env python3

import re
import sys
from getopt import getopt
from functools import reduce

COLOR_CHUNKS = [40 * j + (55 * (j > 0)) for j in range(6)]
MONOTONE_CHUNKS = [10 * i + 8 for i in range(24)]
COLORS = [(i, j, k) for i in COLOR_CHUNKS for j in COLOR_CHUNKS for k in COLOR_CHUNKS]
MONOTONES = [(i, i, i) for i in MONOTONE_CHUNKS]
COLORS.extend(MONOTONES)
START_INDEX = 16
verbose_output = False

def get_nearest(element, source, verbose_output):
    distance = float('inf')
    nearest = None
    for candidate in source:
        d = reduce(lambda x, y: x + y, map(lambda x, y: abs(x - y), element, candidate))
        if (d < distance):
            distance = d
            nearest = candidate
    return nearest

def loop(verbose_output):
    for line in sys.stdin:
        color_codes = re.findall('#([0-9A-F]{6})', line.upper())
        for cc in color_codes:
            if verbose_output:
                print('({})'.format(cc))
            element = list(map(lambda x: int(x, 16), re.findall('[0-9A-F]{2}', cc)))
            nearest = get_nearest(element, COLORS, verbose_output)
            formated_nearest = ['{:02X}'.format(n) for n in nearest]
            code_nearest = '#{}'.format(''.join(formated_nearest))
            if verbose_output:
                print(code_nearest)
            color_index = START_INDEX + COLORS.index(nearest)
            print('color{}'.format(color_index))

def main():
    opts, args = getopt(sys.argv[1:], 'v', ['verbose'])

    global verbose_output

    for opt, val in opts:
        if opt in ('-v', '--verbose'):
            verbose_output = True

    loop(verbose_output)

if __name__ == '__main__':
    main()
